<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:ImrPlatform"
                    xmlns:mainview="clr-namespace:ImrPlatform.View.Main">
    <!--label-->
    <Style x:Key="ContentViewLabel" TargetType="{x:Type Label}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="FontFamily" Value="NanumGothic"/>
    </Style>

    <!--메인 컨텐츠 뷰 -->
    <Style x:Key="MainContentViewLabel" TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="FontFamily" Value="NanumGothic"/>
    </Style>

    <!--메인 컨텐츠 뷰 -->
    <Style x:Key="MyListLabel" TargetType="{x:Type Label}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Foreground" Value="#000"/>
        <Setter Property="FontFamily" Value="NanumGothic"/>
    </Style>

    <!--Listbox-->
    <Style x:Key="MainContentListBox" TargetType="{x:Type ListBox}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ListBoxItem">
                    <Setter Property="Padding" Value="0"/>
                    <Setter Property="Margin" Value="6"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <WrapPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type mainview:ucContentListItem}">
                    <mainview:ucContentListItem DataContext="{Binding}" Margin="0,-3,0,0"/>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--RadioButton-->
    <!--버튼 이미지 라디오버튼-->
    <Style x:Key="CategoryRadioBtn" TargetType="{x:Type RadioButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Border Background="Transparent" x:Name="border" CornerRadius="10">
                        <Image x:Name="BtnImage" Source="{Binding Path=Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ToggleButton-->
    <!--버튼 이미지 토글버튼-->
    <Style x:Key="CategoryToggleBtn" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="Transparent" x:Name="border" CornerRadius="10">
                        <Image x:Name="BtnImage" Source="{Binding Path=Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CheckBox-->
    <!--사이드메뉴 펼치기 버튼-->
    <Style x:Key="SideMenuBarBtn" TargetType="{x:Type CheckBox}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <!--<Border x:Name="border" CornerRadius="0,10,10,0" BorderBrush="DarkGray" BorderThickness="1">
                        <ContentPresenter VerticalAlignment="Center"/>
                    </Border>-->
                    <Image Source="/ImrPlatform;component/Image/icon_sidepopup_arrow1.png" x:Name="img"/>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsMouseOver" Value="false"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Source" TargetName="img" Value="/ImrPlatform;component/Image/icon_sidepopup_arrow1.png"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsMouseOver" Value="false"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Source" TargetName="img" Value="/ImrPlatform;component/Image/icon_sidepopup_arrow_close1.png"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Source" TargetName="img" Value="/ImrPlatform;component/Image/icon_sidepopup_arrow2.png"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Source" TargetName="img" Value="/ImrPlatform;component/Image/icon_sidepopup_arrow_close2.png"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="false"/>
                                <Condition Property="IsPressed" Value="true"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Source" TargetName="img" Value="/ImrPlatform;component/Image/icon_sidepopup_arrow3.png"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="true"/>
                                <Condition Property="IsPressed" Value="true"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Source" TargetName="img" Value="/ImrPlatform;component/Image/icon_sidepopup_arrow_close3.png"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--로그인 체크박스-->
    <Style x:Key="StyleCustomCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="IsChecked" Value ="false"/>
        <Setter Property="ForceCursor" Value="True"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <StackPanel Orientation="Horizontal">
                        <Image x:Name="imageCheckBox_off" Source="/ImrPlatform;component/Image/icon_login_check.png" Width="20" Height="20" Margin="5"/>
                        <Image x:Name="imageCheckBox_on" Source="/ImrPlatform;component/Image/icon_login_check_change.png" Width="20" Height="20" Margin="5"/>
                        <ContentPresenter VerticalAlignment="Center" />
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="imageCheckBox_off" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="imageCheckBox_on" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Button-->
    <!--배경 투명 버튼-->
    <Style x:Key="TransparentBtn" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="5" BorderBrush="#F46E65" BorderThickness="1" Background="Transparent">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#DC9082" TargetName="border"/>
                            <Setter Property="Foreground" Value="#DC9082"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="#8D524A" TargetName="border"/>
                            <Setter Property="Foreground" Value="#8D524A"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter Property="BorderBrush" Value="#F46E65" TargetName="border"/>
                            <Setter Property="Foreground" Value="#F46E65"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="#A6A6A6" TargetName="border"/>
                            <Setter Property="Foreground" Value="#A6A6A6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--흰배경 버튼-->
    <Style x:Key="WhiteBtn" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="5" BorderBrush="#F46E65" BorderThickness="1" Background="White">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#DC9082" TargetName="border"/>
                            <Setter Property="Foreground" Value="#DC9082"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="#8D524A" TargetName="border"/>
                            <Setter Property="Foreground" Value="#8D524A"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter Property="BorderBrush" Value="#F46E65" TargetName="border"/>
                            <Setter Property="Foreground" Value="#F46E65"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="#A6A6A6" TargetName="border"/>
                            <Setter Property="Foreground" Value="#A6A6A6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--다운로드 버튼-->
    <Style x:Key="DownBtn" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="0" BorderBrush="Transparent" BorderThickness="1" Background="#E4007E">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="White"/>
                            <Setter TargetName="border" Property="Background" Value="#C60057"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="White"/>
                            <Setter TargetName="border" Property="Background" Value="#E4007E"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter Property="Foreground" Value="White"/>
                            <Setter TargetName="border" Property="Background" Value="#E4007E"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="White"/>
                            <Setter TargetName="border" Property="Background" Value="#E4007E"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--의견쓰기 등록 버튼-->
    <Style x:Key="ReviewBtn" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="0" BorderBrush="Transparent" BorderThickness="0" 
                            Background="#B4B5B5">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#888889" TargetName="border"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="#B4B5B5" TargetName="border"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter Property="BorderBrush" Value="#B4B5B5" TargetName="border"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="#B4B5B5" TargetName="border"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--로그인 버튼-->
    <Style x:Key="LoginBtn" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" CornerRadius="0" BorderBrush="Transparent" BorderThickness="1" Background="#E4007E">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#DC9082" TargetName="border"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="BorderBrush" Value="#8D524A" TargetName="border"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="False">
                            <Setter Property="BorderBrush" Value="#F46E65" TargetName="border"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="#A6A6A6" TargetName="border"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Expander-->
    <Style x:Key="ExpanderBtn" TargetType="{x:Type Expander}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Grid Name="header">
                            <ToggleButton Background="White" BorderBrush="Transparent" x:Name="togglebutton"
                                          IsChecked="{Binding Path=IsExpanded,Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Style="{TemplateBinding FocusVisualStyle}"
                                          Content="{TemplateBinding Header}"/>
                            <!--<ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" Content="{TemplateBinding Header}" Margin="70,0,0,0"/>-->
                        </Grid>
                        <Border Name="Content"
                                Grid.Row="1"
                                Background="White"
                                BorderBrush="#E0E0E0"
                                BorderThickness="0,0,0,1">
                            <ContentPresenter Margin="4" />
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="Black"/>
                            <Setter Property="Background" Value="Transparent" TargetName="togglebutton"/>
                            <Setter Property="BorderBrush" Value="Transparent" TargetName="togglebutton"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Foreground" Value="Black"/>
                            <Setter Property="Background" Value="Transparent" TargetName="togglebutton"/>
                            <Setter Property="BorderBrush" Value="Transparent" TargetName="togglebutton"/>
                            <Setter Property="Height" Value="{Binding ElementName=Content, Path=Height}" TargetName="ContentRow"/>
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter Property="Foreground" Value="Black"/>
                            <Setter Property="Background" Value="Transparent" TargetName="togglebutton"/>
                            <Setter Property="BorderBrush" Value="Transparent" TargetName="togglebutton"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Black"/>
                            <Setter Property="Background" Value="Transparent" TargetName="togglebutton"/>
                            <Setter Property="BorderBrush" Value="Transparent" TargetName="togglebutton"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--이미지 바인딩이 안돼서 3개만듬.. togglebutton-->
    <Style x:Key="ToggleBtnPurchase" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border BorderBrush="#e0e0e0" BorderThickness="0,0,0,1">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" Background="White">
                            <Rectangle Fill="#E4007E" Width="10" x:Name="selectedColor"/>
                            <Image Width="35" Margin="10,0,10,0" Source="/ImrPlatform;component/Image/icon_sidepopup_purchase2.png"/>
                            <Border x:Name="border" BorderBrush="#e0e0e0" BorderThickness="0,0,0,1" 
                                                            Background="Red" Height="55"/>
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" Margin="0,0,0,0"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                            <Setter TargetName="selectedColor" Property="Fill" Value="#E4007E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                            <Setter TargetName="selectedColor" Property="Fill" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleBtnReview" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border BorderBrush="#e0e0e0" BorderThickness="0,0,0,1">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" Background="White">
                            <Rectangle Fill="#E4007E" Width="10" x:Name="selectedColor"/>
                            <Image Width="35" Margin="10,0,10,0" Source="/ImrPlatform;component/Image/icon_sidepopup_review2.png"/>
                            <Border x:Name="border" BorderBrush="#e0e0e0" BorderThickness="0,0,0,1" 
                                                            Background="Red" Height="55"/>
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" Margin="0,0,0,0"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                            <Setter TargetName="selectedColor" Property="Fill" Value="#E4007E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                            <Setter TargetName="selectedColor" Property="Fill" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToggleBtnPick" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border BorderBrush="#e0e0e0" BorderThickness="0,0,0,1">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Stretch" Background="White">
                            <Rectangle Fill="#E4007E" Width="10" x:Name="selectedColor"/>
                            <Image Width="35" Margin="10,0,10,0" Source="/ImrPlatform;component/Image/icon_sidepopup_pick2.png"/>
                            <Border x:Name="border" BorderBrush="#e0e0e0" BorderThickness="0,0,0,1" 
                                                            Background="Red" Height="55"/>
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" Margin="0,0,0,0"/>
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                            <Setter TargetName="selectedColor" Property="Fill" Value="#E4007E"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                            <Setter TargetName="selectedColor" Property="Fill" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="#e0e0e0" TargetName="border"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ListView-->
    <Style x:Key="MyPageList" TargetType="{x:Type ListView}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}">
                    <Setter Property="Focusable" Value="False"/>
                    <Setter Property="IsEnabled" Value="False"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=IsLogin}" Value="true">
                <Setter Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=IsLogin}" Value="false">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type ListViewItem}" x:Key="MyPageListviewItem">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border CornerRadius="2" SnapsToDevicePixels="True"  
                                BorderThickness="{TemplateBinding BorderThickness}"   
                                BorderBrush="{TemplateBinding BorderBrush}"   
                                Background="{TemplateBinding Background}">
                        <Border Name="InnerBorder" CornerRadius="1" BorderThickness="1">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition MaxHeight="11" />
                                    <RowDefinition />
                                </Grid.RowDefinitions>

                                <Rectangle Name="UpperHighlight" Visibility="Collapsed" Fill="#75FFFFFF" />
                                <GridViewRowPresenter Grid.RowSpan="2"   
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"   
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource ListItemHoverFill}" />
                            <Setter Property="BorderBrush" Value="#FFCCF0FF" />
                            <Setter TargetName="UpperHighlight" Property="Visibility" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--TextBox-->
    <Style x:Key="TbSearch" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="537"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <ScrollViewer x:Name="PART_ContentHost" Grid.Column="0"
                                          Margin="10,0,0,0"
                                      HorizontalAlignment="Left"
                                          Focusable="False"/>
                        <Image x:Name="BtnImage" Source="/ImrPlatform;component/Image/icon_search.png" Grid.Column="1" Margin="0,0,10,0"
                               Width="33" Height="33"/>
                        <Border x:Name="border" BorderBrush="#E4007E" BorderThickness="2" Background="Transparent" Grid.ColumnSpan="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" Value="#DC9082" TargetName="border"/>
                            <Setter Property="Foreground" Value="#DC9082"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" Value="#A6A6A6" TargetName="border"/>
                            <Setter Property="Foreground" Value="#A6A6A6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Combobox-->
    <!--의견쓰기 별체크 콤보박스-->


    <ControlTemplate x:Key="CustomMemoToggleButton" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="40"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <!--<Path Data="M398.5,15.401296 L421.5,15.401296 410.47917,34.821168 z" Fill="#65656586" HorizontalAlignment="Left" Height="30" Margin="398.5,15.402,0,0" Stretch="Fill" VerticalAlignment="Top" Width="30"/>-->
            <Border x:Name="Border" BorderBrush="Transparent" BorderThickness="0" CornerRadius="0" Grid.Column="0" Background="White"/>
            <Border x:Name="SmallBorder"  BorderBrush="#bfbfbf" BorderThickness="1" CornerRadius="0" Grid.ColumnSpan="2" Background="White"/>
            <Image x:Name="imgArrow" Source="/ImrPlatform;component/Image/icon_down.png" Height="6" Width="8" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,10,0" Grid.Column="1"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter TargetName="SmallBorder" Property="Background" Value="#cccccc"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MemoCombobox" TargetType="{x:Type ComboBox}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Foreground" Value="#666666"/>
        <Setter Property="FontFamily" Value="NanumGothic"/>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource NormalCbx}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid  ShowGridLines="False">
                        <ContentPresenter/>
                        <ToggleButton Template="{StaticResource CustomMemoToggleButton}" 
                                      x:Name="ComboToggleBtn_Normal" 
                                      IsChecked="{Binding Path=IsDropDownOpen,
                                                          Mode=TwoWay,
                                                          RelativeSource={RelativeSource TemplatedParent}}" 
                                      ClickMode="Press"/>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" 
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"  
                                          VerticalAlignment="Center" HorizontalAlignment="Left" 
                                          Margin="20,0,0,0"/>
                        <Popup IsOpen="{TemplateBinding IsDropDownOpen}"
                               PopupAnimation="Fade"
                               AllowsTransparency="True" 
                               Name="Popup">
                            <Grid Background="Transparent" SnapsToDevicePixels="True" MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border BorderBrush="#bfbfbf" BorderThickness="1" CornerRadius="4" x:Name="DropDownBorder" Background="White">
                                    <ScrollViewer SnapsToDevicePixels="True" VerticalScrollBarVisibility="Hidden">
                                        <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" VerticalAlignment="Center"
                                                        Margin="0,5,0,5" Width="115"/>
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                    </Grid>
                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="ComboToggleBtn_Normal" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="Background" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="Window.AllowsTransparency" SourceName="Popup" Value="True">
                            <Setter Property="Border.CornerRadius" TargetName="DropDownBorder" Value="0"/>
                            <Setter Property="Border.BorderThickness" TargetName="DropDownBorder" Value="1,0,1,1"/>
                            <Setter Property="FrameworkElement.Margin" TargetName="DropDownBorder" Value="0,0,0,0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--ProgressBar-->
    <Style x:Key="DownloadBar" TargetType="{x:Type ProgressBar}">
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar">
                    <Border BorderBrush="#B4B5B5" BorderThickness="1" Background="Transparent" CornerRadius="5" Padding="0">
                        <Grid x:Name="PART_Track">
                            <Border x:Name="PART_Indicator" BorderBrush="Transparent" BorderThickness="0" 
                                    Background="#E4007E" CornerRadius="5" Padding="0"
                                    HorizontalAlignment="Left"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--ListboxItem-->
    <!--메인 리스트박스 아이템-->
    <Style x:Key="MainListboxItem" TargetType="{x:Type ListBoxItem}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="30,5,5,5"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect ShadowDepth="0" BlurRadius="10" Color="Gray" />
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
                            Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <Border.LayoutTransform>
                            <ScaleTransform ScaleX="1" ScaleY="1" x:Name="borderTransform"/>
                        </Border.LayoutTransform>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--<Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>-->
                        <EventTrigger RoutedEvent="MouseEnter">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="borderTransform"
                                                     Storyboard.TargetProperty="ScaleX"
                                                     To="1.05"
                                                     Duration="0:0:0.1"
                                                     AutoReverse="False" />
                                    <DoubleAnimation Storyboard.TargetName="borderTransform"
                                                     Storyboard.TargetProperty="ScaleY"
                                                     To="1.05"
                                                     Duration="0:0:0.1"
                                                     AutoReverse="False" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="MouseLeave">
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="borderTransform"
                                                     Storyboard.TargetProperty="ScaleX"
                                                     To="1"
                                                     Duration="0:0:0.1"
                                                     AutoReverse="False" />
                                    <DoubleAnimation Storyboard.TargetName="borderTransform"
                                                     Storyboard.TargetProperty="ScaleY"
                                                     To="1"
                                                     Duration="0:0:0.1"
                                                     AutoReverse="False" />
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>